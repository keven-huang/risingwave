syntax = "proto3";

package plan_common;

import "common.proto";
import "data.proto";
import "expr.proto";

option java_package = "com.risingwave.proto";
option optimize_for = SPEED;

// Field is a column in the streaming or batch plan.
message Field {
  data.DataType data_type = 1;
  string name = 2;
}

message ColumnDesc {
  data.DataType column_type = 1;
  int32 column_id = 2;
  // we store the column name in column desc now just for debug, but in future
  // we should store it in ColumnCatalog but not here
  string name = 3;
  // For STRUCT type.
  repeated ColumnDesc field_descs = 4;
  // The user-defined type's name. Empty if the column type is a builtin type.
  // For example, when the type is created from a protobuf schema file,
  // this field will store the message name.
  string type_name = 5;

  // deprecated, breaking change
  // GeneratedColumnDesc generated_column = 6 [deprecated = true];
  // reserved 6;

  // Optional description for the generated column or default value.
  oneof generated_or_default_column {
    GeneratedColumnDesc generated_column = 6;
    DefaultColumnDesc default_column = 7;
  }

  // This field is used to store the description set by the `comment on` clause.
  optional string description = 8;
}

message ColumnCatalog {
  ColumnDesc column_desc = 1;
  bool is_hidden = 2;
}

message GeneratedColumnDesc {
  expr.ExprNode expr = 1;
}

message DefaultColumnDesc {
  // Expression of the `DEFAULT`. Used when inserting new records.
  expr.ExprNode expr = 1;
  // Evaluated value of the expression at the time of the table creation or the
  // column addition. Used when filling the default value for the records where
  // the column is missing.
  data.Datum snapshot_value = 2;
}

message StorageTableDesc {
  uint32 table_id = 1;
  repeated ColumnDesc columns = 2;
  // TODO: may refactor primary key representations
  repeated common.ColumnOrder pk = 3;
  repeated uint32 dist_key_in_pk_indices = 4;
  uint32 retention_seconds = 5;
  repeated uint32 value_indices = 6;
  uint32 read_prefix_len_hint = 7;
  // Whether the table is versioned. If `true`, column-aware row encoding will
  // be used to be compatible with schema changes.
  bool versioned = 8;
  repeated uint32 stream_key = 9;
}

// Represents a table in external database for CDC scenario
message ExternalTableDesc {
  uint32 table_id = 1;
  repeated ColumnDesc columns = 2;
  // TODO: may refactor primary key representations
  repeated common.ColumnOrder pk = 3;
  string table_name = 4;
  repeated uint32 stream_key = 5;
  map<string, string> connect_properties = 6;
}

enum JoinType {
  // Note that it comes from Calcite's JoinRelType.
  // DO NOT HAVE direction for SEMI and ANTI now.
  UNSPECIFIED = 0;
  INNER = 1;
  LEFT_OUTER = 2;
  RIGHT_OUTER = 3;
  FULL_OUTER = 4;
  LEFT_SEMI = 5;
  LEFT_ANTI = 6;
  RIGHT_SEMI = 7;
  RIGHT_ANTI = 8;
}

// https://github.com/tokio-rs/prost/issues/80
enum FormatType {
  FORMAT_TYPE_UNSPECIFIED = 0;
  FORMAT_TYPE_NATIVE = 1;
  FORMAT_TYPE_DEBEZIUM = 2;
  FORMAT_TYPE_DEBEZIUM_MONGO = 3;
  FORMAT_TYPE_MAXWELL = 4;
  FORMAT_TYPE_CANAL = 5;
  FORMAT_TYPE_UPSERT = 6;
  FORMAT_TYPE_PLAIN = 7;
}

enum EncodeType {
  ENCODE_TYPE_UNSPECIFIED = 0;
  ENCODE_TYPE_NATIVE = 1;
  ENCODE_TYPE_AVRO = 2;
  ENCODE_TYPE_CSV = 3;
  ENCODE_TYPE_PROTOBUF = 4;
  ENCODE_TYPE_JSON = 5;
  ENCODE_TYPE_BYTES = 6;
  ENCODE_TYPE_TEMPLATE = 7;
}

enum RowFormatType {
  ROW_UNSPECIFIED = 0;
  JSON = 1;
  PROTOBUF = 2;
  DEBEZIUM_JSON = 3;
  AVRO = 4;
  MAXWELL = 5;
  CANAL_JSON = 6;
  CSV = 7;
  NATIVE = 8;
  DEBEZIUM_AVRO = 9;
  UPSERT_JSON = 10;
  UPSERT_AVRO = 11;
  DEBEZIUM_MONGO_JSON = 12;
  BYTES = 13;
}

message IndexAndExpr {
  uint32 index = 1;
  expr.ExprNode expr = 2;
}

message DefaultColumns {
  repeated IndexAndExpr default_columns = 1;
}

// The cardinality of the output rows of a plan node. Bounds are inclusive.
message Cardinality {
  uint64 lo = 1;
  // Unbounded if not set.
  optional uint64 hi = 2;
}
